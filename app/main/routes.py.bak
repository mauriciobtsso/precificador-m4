from flask import Blueprint, render_template, request, redirect, url_for, flash, send_from_directory, current_app, send_file, jsonify
from flask_login import login_user, logout_user, login_required
from app.services.importacao import importar_clientes, importar_vendas
from app.extensions import db
from app.produtos.models import Produto
from app.models import User, Configuracao, Venda, ItemVenda, PedidoCompra, ItemPedido, Taxa
from app.clientes.models import Cliente
from app.main import main
from app.config import get_config
from sqlalchemy import text, func, extract
from openpyxl import load_workbook
from io import TextIOWrapper
import csv
import os
from datetime import datetime, timedelta

# =========================
# Imports de utils
# =========================
from app.utils.pdf_helpers import gerar_pdf_pedido
from app.utils.whatsapp_helpers import gerar_texto_whatsapp
from app.utils.number_helpers import to_float, parse_brl, parse_pct
from app.utils.parcelamento_helpers import montar_parcelas
from app.utils.excel_helpers import _headers_lower, _row_as_dict, _get, _as_bool
from app.utils.date_helpers import parse_data
from app.services.parcelamento import (
    gerar_linhas_por_valor,
    gerar_linhas_por_produto,
)

# =====================================================
# Rotas principais
# =====================================================
@main.route("/")
def index():
    return redirect(url_for("main.dashboard"))

# --- Login ---
@main.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")

        # Busca o usu치rio pelo username
        user = User.query.filter_by(username=username).first()

        # Valida senha usando check_password
        if user and user.check_password(password):
            login_user(user)
            flash("Login realizado com sucesso!", "success")
            next_page = request.args.get("next")
            return redirect(next_page or url_for("main.dashboard"))
        else:
            flash("Usu치rio ou senha inv치lidos", "danger")

    return render_template("login.html")

# --- Logout ---
@main.route("/logout")
@login_required
def logout():
    logout_user()
    flash("Logout realizado com sucesso.", "info")
    return redirect(url_for("main.login"))

# ===========================
# DASHBOARD PRINCIPAL (M4)
# ===========================

from datetime import datetime, timedelta
from flask import render_template
from flask_login import login_required
from sqlalchemy import func, extract

from app.extensions import db
from app.produtos.models import Produto
from app.models import Venda, ItemVenda, Notificacao
from app.clientes.models import Cliente

# --- Dashboard ---
@main.route("/dashboard")
@login_required
def dashboard():
    hoje = datetime.today()

    # 游릭 1. Resumo geral
    produtos = Produto.query.all()

    total_vendas_mes = (
        db.session.query(func.sum(Venda.valor_total))
        .filter(extract("year", Venda.data_abertura) == hoje.year)
        .filter(extract("month", Venda.data_abertura) == hoje.month)
        .scalar()
        or 0
    )

    ticket_medio = (
        db.session.query(func.sum(Venda.valor_total) / func.count(Venda.id))
        .scalar()
        or 0
    )

    # 游릭 2. Top 5 clientes
    top_clientes = (
        db.session.query(
            Cliente.nome,
            func.sum(Venda.valor_total).label("total")
        )
        .join(Venda, Cliente.id == Venda.cliente_id)
        .group_by(Cliente.id)
        .order_by(func.sum(Venda.valor_total).desc())
        .limit(5)
        .all()
    )

    # 游릭 3. Produto mais vendido
    produto_mais_vendido = (
        db.session.query(
            ItemVenda.produto_nome,
            func.sum(ItemVenda.quantidade).label("qtd")
        )
        .group_by(ItemVenda.produto_nome)
        .order_by(func.sum(ItemVenda.quantidade).desc())
        .first()
    )

    # 游릭 4. Vendas dos 칰ltimos 6 meses
    vendas_por_mes = (
        db.session.query(
            extract("month", Venda.data_abertura).label("mes"),
            func.sum(Venda.valor_total).label("total")
        )
        .filter(Venda.data_abertura >= hoje - timedelta(days=180))
        .group_by(extract("month", Venda.data_abertura))
        .order_by(extract("month", Venda.data_abertura))
        .all()
    )

    mapa_meses = [
        "Jan", "Fev", "Mar", "Abr", "Mai", "Jun",
        "Jul", "Ago", "Set", "Out", "Nov", "Dez"
    ]

    meses_nomes = [mapa_meses[int(m) - 1] for m, _ in vendas_por_mes]
    totais = [float(total) for _, total in vendas_por_mes]

    # 游릭 5. Contagem de notifica칞칫es pendentes (substitui alertas)
    notificacoes_pendentes = Notificacao.query.filter_by(status="enviado").count()

    # 游릭 6. Renderiza칞칚o
    return render_template(
        "dashboard.html",
        produtos=produtos,
        total_vendas_mes=total_vendas_mes,
        top_clientes=top_clientes,
        produto_mais_vendido=produto_mais_vendido,
        ticket_medio=ticket_medio,
        meses=meses_nomes,
        totais=totais,
        notificacoes_pendentes=notificacoes_pendentes,
    )

###########################
# Wrappers de compatibilidade para Produtos
###########################
@main.route("/produtos")
@login_required
def produtos_legacy():
    return redirect(url_for("produtos.produtos"), code=308)

@main.route("/produto/novo", methods=["GET", "POST"])
@main.route("/produto/editar/<int:produto_id>", methods=["GET", "POST"])
@login_required
def gerenciar_produto_legacy(produto_id=None):
    if produto_id:
        return redirect(url_for("produtos.gerenciar_produto", produto_id=produto_id), code=308)
    return redirect(url_for("produtos.gerenciar_produto"), code=308)

@main.route("/produto/excluir/<int:produto_id>")
@login_required
def excluir_produto_legacy(produto_id):
    return redirect(url_for("produtos.excluir_produto", produto_id=produto_id), code=308)

@main.route("/produtos/importar", methods=["GET", "POST"])
@login_required
def importar_produtos_legacy():
    return redirect(url_for("produtos.importar_produtos"), code=308)

@main.route("/produtos/exemplo-csv")
@login_required
def exemplo_csv_legacy():
    return redirect(url_for("produtos.exemplo_csv"), code=308)

#######################
# --- Parcelamento ---
#######################
@main.route("/parcelamento")
@login_required
def parcelamento_index():
    produtos = Produto.query.order_by(Produto.nome).all()
    return render_template("parcelamento_index.html", produtos=produtos)

@main.route("/parcelamento/<int:produto_id>")
@login_required
def parcelamento(produto_id):
    produto = Produto.query.get_or_404(produto_id)

    valor_base, linhas = gerar_linhas_por_produto(produto)
    texto_whats = gerar_texto_whatsapp(produto, valor_base, linhas)

    return render_template(
        "parcelamento.html",
        produto=produto,
        resultado=linhas,
        texto_whats=texto_whats
    )

@main.route("/parcelamento/rapido", methods=["GET", "POST"])
@login_required
def parcelamento_rapido():
    resultado = []
    preco_base = None
    texto_whats = ""

    if request.method == "POST":
        preco_base = to_float(request.form.get("preco_base"))
        taxas = Taxa.query.order_by(Taxa.numero_parcelas).all()

        resultado = gerar_linhas_por_valor(preco_base)
        texto_whats = gerar_texto_whatsapp(None, preco_base, resultado)

    return render_template(
        "parcelamento_rapido.html",
        resultado=resultado,
        preco_base=preco_base,
        texto_whats=texto_whats
    )

# --- Configura칞칫es ---
@main.route("/configuracoes")
@login_required
def configuracoes():
    configs = Configuracao.query.all()
    return render_template("configuracoes.html", configs=configs)

@main.route("/configuracao/nova", methods=["GET", "POST"])
@main.route("/configuracao/editar/<int:config_id>", methods=["GET", "POST"])
@login_required
def gerenciar_configuracao(config_id=None):
    config = Configuracao.query.get(config_id) if config_id else None
    if request.method == "POST":
        chave = request.form.get("chave")
        valor = request.form.get("valor")

        if not config:
            config = Configuracao(chave=chave, valor=valor)
            db.session.add(config)
        else:
            config.chave = chave
            config.valor = valor

        db.session.commit()
        flash("Configura칞칚o salva com sucesso!", "success")
        return redirect(url_for("main.configuracoes"))

    return render_template("configuracao_form.html", config=config)

@main.route("/configuracao/excluir/<int:config_id>")
@login_required
def excluir_configuracao(config_id):
    config = Configuracao.query.get_or_404(config_id)
    db.session.delete(config)
    db.session.commit()
    flash("Configura칞칚o exclu칤da com sucesso!", "success")
    return redirect(url_for("main.configuracoes"))

# --- Usu치rios ---
@main.route("/usuarios")
@login_required
def usuarios():
    users = User.query.all()
    return render_template("usuarios.html", users=users)

@main.route("/usuario/novo", methods=["GET", "POST"])
@main.route("/usuario/editar/<int:user_id>", methods=["GET", "POST"])
@login_required
def gerenciar_usuario(user_id=None):
    user = User.query.get(user_id) if user_id else None
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")

        if not user:
            user = User(username=username, password=password)
            db.session.add(user)
        else:
            user.username = username
            if password:
                user.password = password

        db.session.commit()
        flash("Usu치rio salvo com sucesso!", "success")
        return redirect(url_for("main.usuarios"))

    return render_template("usuario_form.html", user=user)

@main.route("/usuario/excluir/<int:user_id>")
@login_required
def excluir_usuario(user_id):
    user = User.query.get_or_404(user_id)
    db.session.delete(user)
    db.session.commit()
    flash("Usu치rio exclu칤do com sucesso!", "success")
    return redirect(url_for("main.usuarios"))

# --- Health Check ---
@main.route("/health", methods=["GET", "HEAD"])
def health():
    try:
        db.session.execute(text("SELECT 1"))
        return {"status": "ok"}, 200
    except Exception as e:
        return {"status": "error", "msg": str(e)}, 500

# --- Importar Relat칩rios (Clientes e Vendas) ---
@main.route("/importar", methods=["GET", "POST"])
@login_required
def importar():
    if request.method == "POST":
        file = request.files.get("file")
        tipo = request.form.get("tipo")

        if not file or file.filename == "":
            flash("Nenhum arquivo selecionado.", "danger")
            return redirect(url_for("main.importar"))

        try:
            if str(file.filename).lower().endswith(".xlsx"):
                if tipo == "clientes":
                    importar_clientes(file)
                    flash("Clientes importados com sucesso!", "success")
                elif tipo == "vendas":
                    importar_vendas(file)
                    flash("Vendas importadas com sucesso!", "success")
                else:
                    flash("Tipo de importa칞칚o inv치lido.", "danger")
            else:
                flash("Envie um arquivo .xlsx exportado do sistema.", "danger")
        except Exception as e:
            db.session.rollback()
            flash(f"Erro ao importar: {e}", "danger")

        return redirect(url_for("main.importar"))

    return render_template("importar.html")

# ---------------------------------------------------
# PDF DO PEDIDO
# ---------------------------------------------------
@main.route("/pedidos/<int:id>/pdf")
@login_required
def pedido_pdf(id):
    pedido = PedidoCompra.query.get_or_404(id)
    filepath = gerar_pdf_pedido(pedido)
    return send_file(filepath, as_attachment=False)

# ---------------------------------------------------
# API WhatsApp (Produto)
# ---------------------------------------------------
@main.route("/api/produto/<int:produto_id>/whatsapp")
@login_required
def api_produto_whatsapp(produto_id):
    produto = Produto.query.get_or_404(produto_id)

    valor_base, linhas = gerar_linhas_por_produto(produto)
    texto_whats = gerar_texto_whatsapp(produto, valor_base, linhas)

    return jsonify({"texto_completo": texto_whats})

# ============================
# CONTEXT PROCESSOR GLOBAL
# ============================
from app.models import Notificacao

@main.app_context_processor
def inject_notificacoes():
    """Disponibiliza o total de notifica칞칫es n칚o lidas em todos os templates."""
    try:
        total_nao_lidas = Notificacao.query.filter_by(status="enviado").count()
    except Exception:
        total_nao_lidas = 0
    return {"total_nao_lidas": total_nao_lidas}

