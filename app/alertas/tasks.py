# ===========================
# ALERTAS - AGENDADOR DI√ÅRIO (Sprint 4.3 - v4 Est√°vel)
# ===========================

from datetime import datetime
import time
import traceback
from apscheduler.schedulers.background import BackgroundScheduler
from flask import current_app

from app.extensions import db
from app.utils.alertas import gerar_alertas_gerais
from app.alertas.notificacoes import enviar_notificacao


# -----------------------------------------------------
# üîπ Fun√ß√£o principal: verificar_alertas_diarios()
# -----------------------------------------------------
def verificar_alertas_diarios(app=None):
    """
    Executa verifica√ß√£o autom√°tica de alertas e registra notifica√ß√µes.
    Pode ser executada manualmente ou via agendador APScheduler.
    """

    ctx = None
    if app:
        try:
            ctx = app.app_context()
            ctx.push()
        except Exception:
            pass  # j√° dentro do contexto

    inicio = datetime.now()
    print(f"[{inicio:%Y-%m-%d %H:%M:%S}] üîÑ Iniciando verifica√ß√£o di√°ria de alertas...")

    try:
        total_novos = 0
        inicio_exec = time.time()

        # 1Ô∏è‚É£ Gera alertas consolidados do sistema
        resultado = gerar_alertas_gerais()

        # ‚úÖ Suporte a retorno paginado (dict com "data")
        if isinstance(resultado, dict) and "data" in resultado:
            alertas = resultado["data"]
        else:
            alertas = resultado or []

        print(f"   ‚ûú {len(alertas)} alertas encontrados para an√°lise.")

        # 2Ô∏è‚É£ Processa cada alerta individualmente
        for alerta in alertas:
            try:
                registro = enviar_notificacao(alerta, meio="sistema")
                if registro:
                    total_novos += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è Erro ao registrar alerta: {e}")
                traceback.print_exc()

        # 3Ô∏è‚É£ Finaliza e exibe resumo
        fim = datetime.now()
        duracao = time.time() - inicio_exec
        print(f"[{fim:%Y-%m-%d %H:%M:%S}] ‚úÖ {total_novos} novas notifica√ß√µes registradas ({duracao:.1f}s)")

    except Exception as e:
        print("‚ùå Erro na verifica√ß√£o di√°ria de alertas:")
        traceback.print_exc()

    finally:
        if ctx:
            ctx.pop()


# -----------------------------------------------------
# üîπ Fun√ß√£o: iniciar_scheduler()
# -----------------------------------------------------
def iniciar_scheduler(app):
    """
    Configura e inicia o APScheduler integrado ao Flask.
    Executa a verifica√ß√£o diariamente √†s 06:00 (hor√°rio do servidor).
    """

    scheduler = BackgroundScheduler(timezone="America/Sao_Paulo")

    # Remove tarefas antigas duplicadas
    for job in scheduler.get_jobs():
        scheduler.remove_job(job.id)

    # Adiciona a tarefa di√°ria
    scheduler.add_job(
        func=lambda: verificar_alertas_diarios(app),
        trigger="cron",
        hour=6,
        minute=0,
        id="verificacao_alertas_diarios",
        replace_existing=True,
    )

    scheduler.start()
    print("Agendador de alertas iniciado (executa diariamente √†s 06:00).")
    return scheduler


# -----------------------------------------------------
# üîπ Execu√ß√£o manual (CLI)
# -----------------------------------------------------
if __name__ == "__main__":
    """
    Permite execu√ß√£o manual via terminal:
    > py -m app.alertas.tasks
    """
    from app import create_app

    app = create_app()
    with app.app_context():
        print("‚öôÔ∏è Executando verifica√ß√£o manual de alertas...")
        verificar_alertas_diarios(app)
